#build from Native 64 bit tools command prompt in the project root with
#nmake -f Makefiles\Makefile.windows
#Building with NV64 vendor can provide binary that at runtime works fine on both amd, nvidia and intel
OPENCL_VENDOR=NV64 # NV, NV64, AMD, AMD64, INTEL

!if "$(OPENCL_VENDOR)" == "NV"
OPENCL_DIR="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v5.5"
OPENCL_INC=$(OPENCL_DIR)\include
OPENCL_LIB=$(OPENCL_DIR)\lib\Win32\OpenCL.lib
!endif

!if "$(OPENCL_VENDOR)" == "NV64"
OPENCL_DIR="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0"
OPENCL_INC=$(OPENCL_DIR)\include
OPENCL_LIB=$(OPENCL_DIR)\lib\x64\OpenCL.lib
!endif

!if "$(OPENCL_VENDOR)" == "AMD"
OPENCL_DIR="\Program Files (x86)\AMD APP"
OPENCL_INC=$(OPENCL_DIR)\include
OPENCL_LIB=$(OPENCL_DIR)\lib\x86\OpenCL.lib
!endif

!if "$(OPENCL_VENDOR)" == "AMD64"
OPENCL_DIR="\Program Files (x86)\AMD APP"
OPENCL_INC=$(OPENCL_DIR)\include
OPENCL_LIB=$(OPENCL_DIR)\lib\x86_64\OpenCL.lib
!endif

!if "$(OPENCL_VENDOR)" == "INTEL"
OPENCL_DIR="C:\Program Files (x86)\IntelSWTools\system_studio_2020\OpenCL\sdk"
OPENCL_INC=$(OPENCL_DIR)\include
OPENCL_LIB=$(OPENCL_DIR)\lib\x86\OpenCL.lib
!endif

LIBS=$(OPENCL_LIB) Ws2_32.lib 
INCLUDES=-I$(OPENCL_INC)
DEFINES=-DWINDOWS -DCURL_STATICLIB -D_CRT_SECURE_NO_DEPRECATE
CFLAGS=-MT -Ox -EHsc $(DEFINES) $(INCLUDES) # -MTd -Zi for debug, -MT -Ox for prod
CXX=cl
CPP=cl /E

all: memtestCL.exe

clean:
	del *.obj
	del *.clh
	del *.exe

xxd.exe: xxd.cpp
	$(CXX) xxd.cpp

memtestCL_kernels.clh: memtestCL_kernels.cl xxd.exe
	$(CPP) memtestCL_kernels.cl > memtestCL_kernels
	xxd.exe -i memtestCL_kernels > memtestCL_kernels.clh
	del memtestCL_kernels

memtestCL_core.obj: memtestCL_core.cpp memtestCL_core.h memtestCL_kernels.clh
	$(CXX) $(CFLAGS) -c memtestCL_core.cpp

memtestCL.exe: memtestCL_core.obj memtestCL_cli.cpp
	$(CXX) $(CFLAGS) memtestCL_core.obj memtestCL_cli.cpp -link $(LIBS) -OUT:memtestCL.exe
